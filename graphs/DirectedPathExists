public class Solution {
    public int solve(int a, int[][] arr) {
        
        HashMap<Integer, ArrayList<Integer>> graph = new HashMap<Integer, ArrayList<Integer>>();
        
        for(int i = 0 ; i < arr.length ; i++){
            graph.computeIfAbsent(arr[i][0], v->new ArrayList<Integer>()).add(arr[i][1]);
        }
        HashSet<Integer> hs = new HashSet<Integer>();
        
        return dfs(graph, hs, a, 1);
    }
    
    static int dfs(HashMap<Integer, ArrayList<Integer>> graph,  HashSet<Integer> hs, int n, int curr){
        if(curr == n) return 1;
        hs.add(curr);
        if(!graph.containsKey(curr)) return 0;
        for(int v : graph.get(curr)){
            if(!hs.contains(v)){
                if(dfs(graph, hs, n, v) == 1) return 1;
            }
        }
        hs.remove(curr);
        return 0;
    }
}
