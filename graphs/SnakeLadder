public class Solution {
    
    public int snakeLadder(ArrayList<ArrayList<Integer>> a, ArrayList<ArrayList<Integer>> b) {
    
        HashMap<Integer, Integer> ladder = new HashMap<Integer, Integer>();
        HashMap<Integer, Integer> snake = new HashMap<Integer, Integer>();
        
        for(int i = 0 ; i < a.size() ; i++){
            ladder.put(a.get(i).get(0),a.get(i).get(1));
        }
        
        for(int i = 0 ; i < b.size() ; i++){
            snake.put(b.get(i).get(0),b.get(i).get(1));
        }
        
        Queue<Integer> q = new LinkedList<Integer>();
        q.add(1);
        HashSet<Integer> visited = new HashSet<Integer>();
        visited.add(1);
        int dp[] = new int[100];
        int roll = 0;
        while(!q.isEmpty()){
            int size = q.size();
            roll++;
            while(size-- >0){
                int curr = q.remove();
                for(int i = curr+1 ; i <= curr+6; i++){
                    
                    int next = i;
                    if(ladder.containsKey(i)) next = ladder.get(i);
                    else if(snake.containsKey(i)) next = snake.get(i);
                    
                    
                    if(next > 100 || visited.contains(next)) continue;
                    if(next == 100) return roll;
                    visited.add(next);
                    // System.out.println(next);
                    q.add(next);
                }
            }
            
        }
        
        return -1;
        
    }
    
}
