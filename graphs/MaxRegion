public class Solution {
    
    int[] dx = new int[]{-1,1,0,0,-1,-1,1,1};
    int[] dy = new int[]{0,0,-1,1,-1,1,-1,1};
    
    public int solve(int[][] arr) {
        
        int n = arr.length;
        int m = arr[0].length;
        int max = -1;
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(arr[i][j] == 1){
                    max = Math.max(max, dfs(arr, i, j, n, m));
                }
            }
        }
        return max;
    }
    
    int dfs(int[][] arr, int i, int j, int n, int m){
        if(i < 0 || j < 0 || i >= n || j >= m || arr[i][j] == 0 || arr[i][j] == -1) return 0;
        
        arr[i][j] = -1;
        
        int sum = 1;
        for(int p = 0 ; p < 8 ; p++){
            sum +=dfs(arr, i+dx[p], j+dy[p], n, m);
        }
        
        return sum;
    }
}
