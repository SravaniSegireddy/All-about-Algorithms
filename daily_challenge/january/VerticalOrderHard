/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeMap<Integer, ArrayList<Pair>> tm;
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        
        if(root == null) return new ArrayList<List<Integer>>();
        
        tm = new TreeMap<Integer, ArrayList<Pair>>();
        dfs(root, 0, 0);
        
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        
        for(Map.Entry entry : tm.entrySet()){
            
            ArrayList<Pair> lst = (ArrayList<Pair>)entry.getValue();
            Collections.sort(lst, new MySort());
            
            ArrayList<Integer> in = new ArrayList<Integer>();
            for(Pair ele : lst){
                in.add(ele.node.val);
            }
            res.add(in);
        }
        
        return res;
        
    }
    
    
    void dfs(TreeNode root, int hl, int vl){
        if(root == null) return;
        tm.computeIfAbsent(hl, v-> new ArrayList<Pair>()).add(new Pair(root, vl));
        
        if(root.left != null)
            dfs(root.left, hl-1, vl+1);
        
        if(root.right != null)
            dfs(root.right, hl+1, vl+1);
    }
}

class MySort implements Comparator<Pair>{
    public int compare(Pair p1, Pair p2){
        if(p1.level < p2.level) return -1;
        else if(p1.level > p2.level) return 1;
        else {
            if(p1.node.val <= p2.node.val) return -1;
            else return 1;
        }
    }
}
class Pair{
    TreeNode node;
    int level;
    
    Pair(TreeNode node, int level){
        this.node = node;
        this.level = level;
    }
}
